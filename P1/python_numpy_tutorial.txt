https://docs.python.org/2.7/tutorial/datastructures.html

https://docs.python.org/2.7/tutorial/controlflow.html

# start python command prompt
ubuntu_machine$ python		# in linux machine if python is installed, just type python in command prompt.
>>> a = [1,2,3,4,5]
>>> a
[1, 2, 3, 4, 5]			# output variable 'a' value
>>> x = a			#// list assiment is not copy of all element but just a new pointer to the same list
>>> x[0] = 999			#// Hence, this statement changes 0th location value for both variables 'x' and 'a' 
>>> x
[999, 2, 3, 4, 5]
>>> a
[999, 2, 3, 4, 5]
>>> a[0] = 1
>>> import copy as cp
>>> x = cp.copy(a)		#// if want to copy all elements in completely new list use copy()
>>> x[0] = 999
>>> x
[999, 2, 3, 4, 5]
>>> a
[1, 2, 3, 4, 5]



# few useful functions from numpy (quick examples of how to use some of the methods from numpy.)
>>> import numpy as np
>>> a = [1,2,3,4,5]
>>> arr = np.array(a)
>>> arr
array([1, 2, 3, 4, 5])
>>> b = [6,7,8,9,10]
>>> c = [a,b]
>>> c
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]

https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html
>>> mat = np.array(c)
>>> mat
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10]])
>>> mat.shape
(2, 5)
>>> mat.reshape(10,1)
array([[ 1],
       [ 2],
       [ 3],
       [ 4],
       [ 5],
       [ 6],
       [ 7],
       [ 8],
       [ 9],
       [10]])
>>> mat1 = np.matrix(c)
>>> mat1
matrix([[ 1,  2,  3,  4,  5],
        [ 6,  7,  8,  9, 10]])

https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html
>>> mat.transpose()
array([[ 1,  6],
       [ 2,  7],
       [ 3,  8],
       [ 4,  9],
       [ 5, 10]])
>>> mat1.transpose()
matrix([[ 1,  6],
        [ 2,  7],
        [ 3,  8],
        [ 4,  9],
        [ 5, 10]])
>>> 
>>> np.mean(mat)
5.5
>>> np.mean(mat,axis = 0)
array([ 3.5,  4.5,  5.5,  6.5,  7.5])
>>> np.mean(mat,axis = 1)
array([ 3.,  8.])
>>> np.mean(mat1)
5.5
>>> np.mean(mat1,axis = 0)
matrix([[ 3.5,  4.5,  5.5,  6.5,  7.5]])
>>> np.mean(mat1,axis = 1)
matrix([[ 3.],
        [ 8.]])
>>> mat.mean(0)
array([ 3.5,  4.5,  5.5,  6.5,  7.5])
>>> mat.mean(1)
array([ 3.,  8.])
>>> mat.mean()
5.5
>>> np.array(b) - np.array(a)
array([5, 5, 5, 5, 5])
>>> np.array(c) - np.array(a)
array([[0, 0, 0, 0, 0],
       [5, 5, 5, 5, 5]])
>>> mean0 = mat.mean(0)
>>> mat - mean0
array([[-2.5, -2.5, -2.5, -2.5, -2.5],
       [ 2.5,  2.5,  2.5,  2.5,  2.5]])
>>> mean1 = mat1.mean(1)
>>> mat - mean1
matrix([[-2., -1.,  0.,  1.,  2.],
        [-2., -1.,  0.,  1.,  2.]])

https://docs.scipy.org/doc/numpy/reference/routines.linalg.html
>>> from numpy import linalg as LA
>>> m = [[1,2,3],[4,5,6],[7,8,9]]
>>> M = np.array(m)
>>> M
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
>>> eig_vals,eig_vec = LA.eig(M)
>>> eig_vals
array([  1.61168440e+01,  -1.11684397e+00,  -9.75918483e-16])
>>> eig_vec
array([[-0.23197069, -0.78583024,  0.40824829],
       [-0.52532209, -0.08675134, -0.81649658],
       [-0.8186735 ,  0.61232756,  0.40824829]])
>>> eig_vals1 = LA.eigvals(M)
>>> eig_vals1
array([  1.61168440e+01,  -1.11684397e+00,  -9.75918483e-16])
